generative adversarial networks refer to a family of generative models that seek to discover the underlying distribution behind a certain data generating process. this distribution is discovered through an adversarial competition between a generator and a discriminator. as we saw in an earlier introductory post on gans, the two models are trained such that the discriminator strives to distinguish between generated and true examples, while the generator seeks to confuse the discriminator by producing data that are as realistic and compelling as possible. in this post, we'll take a deep dive into the math behind gans. my primary source of reference is generative adversarial nets by ian goodfellow, et al. it is in this paper that goodfellow first outlined the concept of a gan, which is why it only makes sense that we commence from the analysis of this paper. let's begin! gan can be seen as an interplay between two different models: the generator and the discriminator. therefore, each model will have its own loss function. in this section, let's try to motivate an intuitive understanding of the loss function for each. to minimize confusion, let's define some notation that we will be using throughout this post. the goal of the discriminator is to correctly label generated images as false and empirical data points as true. therefore, we might consider the following to be the loss function of the discriminator: here, we are using a very generic, unspecific notation for to refer to some function that tells us the distance or the difference between the two functional parameters. we can go ahead and do the same for the generator. the goal of the generator is to confuse the discriminator as much as possible such that it mislabels generated images as being true. the key here is to remember that a loss function is something that we wish to minimize. in the case of the generator, it should strive to minimize the difference between 1, the label for true data, and the discriminator's evaluation of the generated fake data. a common loss function that is used in binary classification problems is binary cross entropy. as a quick review, let's remind ourselves of what the formula for cross entropy looks like: in classification tasks, the random variable is discrete. hence, the expectation can be expressed as a summation. we can simplify this expression even further in the case of binary cross entropy, since there are only two labels: zero and one. this is the function that we have been loosely using in the sections above. binary cross entropy fulfills our objective in that it measures how different two distributions are in the context of binary classification of determining whether an input data point is true or false. applying this to the loss functions in , we can do the same for : now we have two loss functions with which to train the generator and the discriminator! note that, for the loss function of the generator, the loss is small if is close to 1, since . this is exactly the sort of behavior we want from a loss function for the generator. it isn't difficult to see the cogency of with a similar approach. the original paper by goodfellow presents a slightly different version of the two loss functions derived above. essentially, the difference between and is the difference in sign, and whether we want to minimize or maximize a given quantity. in , we framed the function as a loss function to be minimized, whereas the original formulation presents it as a maximization problem, with the sign obviously flipped. then, goodfellow proceeds by framing as a min max game, where the discriminator seeks to maximize the given quantity whereas the generator seeks to achieve the reverse. in other words, the min max formulation is a concise one liner that intuitively demonstrates the adversarial nature of thecompetition between the generator and the discriminator. however, in practice, we define separate loss functions for the generator and the discriminator as we have done above. this is because the gradient of the function is steeper near than that of the function , meaning that trying to maximize , or equivalently, minimizing is going to lead to quicker, more substantial improvements to the performance of the generator than trying to minimize . now that we have defined the loss functions for the generator and the discriminator, it's time to leverage some math to solve the optimization problem, i.e. finding the parameters for the generator and the discriminator such that the loss functions are optimized. this corresponds to training the model in practical terms. when training a gan, we typically train one model at a time. in other words, when training the discriminator, the generator is assumed as fixed. we saw this in action in the previous post on how to build a basic gan. let's return back to the min max game. the quantity of interest can be defined as a function of and . let's call this the value function: in reality, we are more interested in the distribution modeled by the generator than . therefore, let's create a new variable, , and use this substitution to rewrite the value function: the goal of the discriminator is to maximize this value function. through a partial derivative of with respect to , we see that the optimal discriminator, denoted as , occurs when rearranging , we get and this is the condition for the optimal discriminator! note that the formula makes intuitive sense: if some sample is highly genuine, we would expect to be close to one and to be converge to zero, in which case the optimal discriminator would assign 1 to that sample. on the other hand, for a generated sample , we expect the optimal discriminator to assign a label of zero, since should be close to zero. to train the generator, we assume the discriminator to be fixed and proceed with the analysis of the value function. let's first plug in the result we found above, namely , into the value function to see what turns out. to proceed from here, we need a little bit of inspiration. little clever tricks like these are always a joy to look at. if you are confused, don't worry, you aren't the only one. basically, what is happening is that we are exploiting the properties of logarithms to pull out a that previously did not exist. in pulling out this number, we inevitably apply changes to the terms in the expectation, specifically by dividing the denominator by two. why was this necessary? the magic here is that we can now interpret the expectations as kullback leibler divergence: and it is here that we reencounter the jensen shannon divergence, which is defined as where . this means that the expression in can be expressed as a js divergence: the conclusion of this analysis is simple: the goal of training the generator, which is to minimize the value function , we want the js divergence between the distribution of the data and the distribution of generated examples to be as small as possible. this conclusion certainly aligns with our intuition: we want the generator to be able to learn the underlying distribution of the data from sampled training examples. in other words, and should be as close to each other as possible. the optimal generator is thus one that which is able to mimic to model a compelling model distribution . in this post, we took a brief tour of the math behind general adversarial networks. since the publication of goodfellow's work, more gan models have been introduced and studied by different scholars, such as the wasserstein gan or cyclegan to name just a few. the underlying mathematics for these models are obviously going to be different from what we have seen today, but this is a good starting point nonetheless. i hope you enjoyed reading this post. in the next post, i plan to explore the concept of fisher information and the fisher matrix. it is going to be another math heavy ride with gradients and hessians, so keep you belts fastened!