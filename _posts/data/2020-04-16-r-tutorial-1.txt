it’s been a while since we last took a look at the r programming language. while i don’t see r becoming my main programming language , i decided it would still be nice to have r in my arsenal for statistical computing. also, it’s always a fun challenge to learn and try to slowly master a new language.this post will serve as my personal source of reference. it’s also worth mentioning that this document was written in r markdown, which seems to be a mix of markdown and jupyter notebook. it is very similar to jupyter in that it allows users to interweave text with bits of code—perfect for blogging purposes. i’m still getting used to rstudio and r markdown, but we will see how it goes. let’s jump right in! setup ===== there are several basic commands that are useful when setting up and working on a r project. for example, to obtain the location of the current working directory, simply type getwd we can also set the working directory. i don’t want to change the working directory here, so instead i will execute a dummy command. setwd) to see the list of variables stored in the environment, use , which is just r’s version of the linux command. ls to remove all stored variables, rm) basics ====== this section is titled “basics”, but we are going to skip over basic arithematic operations, just because they are boring. here, i document certain perks of the r language that may be useful to know about. r is slightly different from other programming languages in that slicing works differently, i.e. both the lower and upper bound are inclusive. x 5 one important point to note about vectors is that they cannot hold objects of different classes. for example, you will see that r casts all objects to become characters when different data types are passed as arguments. v let’s improve this plot with some visual additions. plot", type="l", col="skyblue") that looks slightly better. plotting can also be performed with data frames. is a built in dataset in r that we will use here for demonstrative purposes. plot we can also create a pairplot, which shows the distributional relationship between each columns in the table. intuitively, i understand it as something like a visual analogue of a symmetric matrix, with each cell showing the distribution according to the row and column variables. pairs note that the function is versatile. we can specify which columns to plot, as well as set the labels of the plot to be created. for example, with ) equivalently, we could have used this command: plot apply functions =============== lapply let’s start with what i think is the easiet one: . in python terms, this would be something like . here is a very quick demo with a dummy example. movies we can get a bit more sophisticated by segmenting the data by some other axis, much like we did for . this can be achieved in r by the operator. concretely, boxplot just as a reminder, this is what we get with a function. notice that the results shown by the box plot is more inclusive in that it also provides information on the iqr aside from just the mean. tapply histogram creating histograms is not so much different form the other types of visualizations we have seen so far. to create a histogram, we can use the command. hist, main='median value of housing prices', xlab='median value', las=1) lines) note that we have already seen this graph previously, when we were discussing the basics of graphing in an earlier section. several modifications have been made to that graph, namely specifying the variables that go into the x and y axis, as well as some labeling and titling. we’ve also added a spline, which can be considered a form of regression line that explains the pattern in the data. conclusion ========== this tutorial got very long, but hopefully it gave you a review of what the r programming language is like and what you can do with it. as it is mainly a statistical computing language, it is geared towards many aspects of data science, and it is no coincidence that r is one of the most widely used language in this field, coming second after python. in the upcoming r tutorials, we will take a look at some other commands that might be useful for data analysis. stay tuned for more!